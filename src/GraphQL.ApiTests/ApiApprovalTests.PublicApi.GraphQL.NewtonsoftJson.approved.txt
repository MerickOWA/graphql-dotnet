namespace GraphQL.NewtonsoftJson
{
    public class DocumentWriter : GraphQL.IDocumentWriter
    {
        public DocumentWriter() { }
        public DocumentWriter(bool indent) { }
        public DocumentWriter(Newtonsoft.Json.JsonSerializerSettings settings) { }
        public System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T value) { }
    }
    public class ExecutionResultJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public ExecutionResultJsonConverter() { }
        public override bool CanRead { get; }
        public override bool CanConvert(System.Type objectType) { }
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) { }
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) { }
    }
    public class HttpResponseStreamWriter : System.IO.TextWriter
    {
        public HttpResponseStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding) { }
        public HttpResponseStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize) { }
        public HttpResponseStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize, System.Buffers.ArrayPool<byte> bytePool, System.Buffers.ArrayPool<char> charPool) { }
        public override System.Text.Encoding Encoding { get; }
        protected override void Dispose(bool disposing) { }
        public override void Flush() { }
        public override System.Threading.Tasks.Task FlushAsync() { }
        public override void Write(char value) { }
        public override void Write(char[] values, int index, int count) { }
        public override void Write(string value) { }
        public override System.Threading.Tasks.Task WriteAsync(char value) { }
        public override System.Threading.Tasks.Task WriteAsync(char[] values, int index, int count) { }
        public override System.Threading.Tasks.Task WriteAsync(string value) { }
    }
    public class NewtonsoftContractResolver : Newtonsoft.Json.Serialization.DefaultContractResolver
    {
        public NewtonsoftContractResolver() { }
        protected override Newtonsoft.Json.Serialization.JsonProperty CreateProperty(System.Reflection.MemberInfo member, Newtonsoft.Json.MemberSerialization memberSerialization) { }
        protected override Newtonsoft.Json.JsonConverter ResolveContractConverter(System.Type objectType) { }
    }
    public static class SchemaExtensions
    {
        public static System.Threading.Tasks.Task<string> ExecuteAsync(this GraphQL.Types.ISchema schema, System.Action<GraphQL.ExecutionOptions> configure) { }
    }
    public static class StringExtensions
    {
        public static object GetValue(this object value) { }
        public static System.Collections.Generic.Dictionary<string, object> ToDictionary(this string json) { }
        public static GraphQL.Inputs ToInputs(this string json) { }
        public static GraphQL.Inputs ToInputs(this Newtonsoft.Json.Linq.JObject obj) { }
    }
}